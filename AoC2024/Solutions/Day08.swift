//
//  Day01.swift
//  AoC2024
//
//  Created by Marcel Zanoni on 02.12.24.
//

import Algorithms
import Foundation

enum Day08: Day {

    static var input: String {
//        """
//        ............
//        ........0...
//        .....0......
//        .......0....
//        ....0.......
//        ......A.....
//        ............
//        ............
//        ........A...
//        .........A..
//        ............
//        ............
//        """

//        """
//        ............
//        ............
//        ....A.......
//        ............
//        ....A.......
//        ............
//        ............
//        ............
//        ............
//        ............
//        ............
//        ............
//        """
        """
.....................U.........w..................
l.................................................
...........o.a................U...w...............
............................................W.....
..........T....................s.............7....
.............................................W....
.........T..............4....n.d.H.........5......
......T.....oj...U.....n...w......H...........z...
.G..x..........................E.....V..H.........
.........a....................d....s.......7w.....
...j....r.............o.............V.......d...W.
.......r..J.Goa.U...............n................z
.........Jj.........M..........Pv.................
...J...........t..3..M..............sLV...........
...................t................n.............
....r...........X...........M........v............
...x....t......I......a.PM...............W........
...........1.Bj....I........vO.h.dL...............
.........6....Rr......B...X........h..5v.L..z.....
......1G...........x.....3B.......5...............
.................B....0..........4..E.............
.....................X.....5..h....P....f.....D...
.......1........J.....eK..........................
..................I....R....K...........k.........
......G..................O........................
...........H...9...............K8.P.4..k..E.......
............1....3.............8.F.............f..
.........................4........................
.l...........X............9.......................
....N.................R...t.e.....................
...g............3..R.........e....h.........f.....
...........................e......i...............
................2...I.7..9..O.....s.........k.....
....................6...9E.............F..O.......
........................KN........................
.......g......................Z.........F..f...Y..
...........................A....i.................
...........6g...b........8.......y.....S..........
..l.....6.....m...............8...................
....u..m...b...............p...A..................
..............b.p........................k........
....m......2...........Z..y....i..................
........g2.....b.........i....D..ZF...............
......2.0...........p............N..........A.....
...m.............S...y........A...Z...N...........
..S..l..........................................Y.
........S....0u.................y......DY.........
...........0.........................D............
.................u...................p...Y........
.......u..........................................
"""
    }

    static func getAntennaPositions(_ grid: Grid) -> [Character: [Position]] {
        let chars = ("a"..."z").characters + ("A"..."Z").characters + ("0"..."9").characters

        var positionsPerChar = [Character: [Position]]()
        chars.forEach { positionsPerChar[$0] = [] }

        for (y, row) in grid.enumerated() {
            for (x, field) in row.enumerated() {
                switch field {
                case ".": break
                default:
                    positionsPerChar[field]?.append(Position(x: x, y: y))
                }
            }
        }

        return positionsPerChar
    }

    static func part1() -> Int {
        let grid = input.grid()

        let positionsPerChar = getAntennaPositions(grid)

        var antinodes = Set<Position>()
        let width = grid.first!.count
        let height = grid.count

        for (_, positions) in positionsPerChar {
            guard positions.count > 1 else { continue }

            for perm in positions.permutations(ofCount: 2) {
                let a = perm[0]
                let b = perm[1]

                let antinode = Position(
                    x: a.x + (a.x - b.x),
                    y: a.y + (a.y - b.y)
                )

                if antinode.x >= 0
                    && antinode.x < width
                    && antinode.y >= 0
                    && antinode.y < height {
                    antinodes.insert(antinode)
                }
            }
        }

//        var newGrid = grid
//        for node in antinodes {
//            newGrid[node.y][node.x] = "#"
//        }
//        print(newGrid.print())

        return antinodes.count
    }

    static func part2() -> Int {
        let grid = input.grid()

        let positionsPerChar = getAntennaPositions(grid)

        var antinodes = Set<Position>()
        let width = grid.first!.count
        let height = grid.count

        for (_, positions) in positionsPerChar {
            guard positions.count > 1 else { continue }

            for perm in positions.permutations(ofCount: 2) {
                let a = perm[0]
                let b = perm[1]

                let xDiff = a.x - b.x
                let yDiff = a.y - b.y

                // iterate applying the diffs, start with `a` point (as it is an antinode)
                var backX = a.x
                var backY = a.y

                while (backX >= 0 && backY >= 0 && backX < width && backY < height) {
                    antinodes.insert(Position(
                        x: backX,
                        y: backY
                    ))

                    backX += xDiff
                    backY += yDiff
                }
            }
        }

//        var newGrid = grid
//        for node in antinodes {
//            newGrid[node.y][node.x] = "#"
//        }
//        print(newGrid.print())

        return antinodes.count
    }
}
